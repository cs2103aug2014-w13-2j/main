//@author: a0119397r



	/**
	 * origin: Dynamiz\src\edu\dynamic\dynamiz\structure\DynamizException.java
	 */

/**
 * An exception class built for Dynamiz
 */
public class DynamizException extends Exception {
		
		/**
		 * Used when an operation cannot be completed.
		 * Will request the program to continue execution.
		 */
		public static final int LEVEL_RETRY = 0;
		public static final String LEVEL_RETRY_MESSAGE = "Retry operaton";
		
		/**
		 * Used when an initialization problem occurs.
		 * Will request the program to restart from the beginning and re-initialize.
		 */	
		public static final int LEVEL_RESTART = 1;
		public static final String LEVEL_RESTART_MESSAGE = "Restart program";
		
		/**
		 * Used when a fatal problem or unknown exception occurs.
		 * Will request the system to exit with error code <code>1</code>.
		 */		
		public static final int LEVEL_TERMINATE = 2;
		public static final String LEVEL_TERMINATE_MESSAGE = "Terminate program";
	
		public static final String LEVEL_UNKNOWN_MESSAGE = "Unknown level provided";
			
		public final int level;
		
		/**
		 * Default constructor of {@link FatalException}.
		 * @param level Fatality level (int) of the exception. Refer to {@link FatalException}.
		 * @param message A string message telling details about the exception. 
		 * Will be printed out to inform user.
		 * @see #LEVEL_RETRY
		 * @see #LEVEL_RESTART
		 * @see #LEVEL_TERMINATE
		 */
		public DynamizException(int level, String message){	
			super(message);
			this.level = level;
		}
		
		@Override
		public String getMessage(){
			String s = super.getMessage();
			return s;
		}	
		private String getLevelMessage(int level){
			switch(level){
			case LEVEL_RETRY:
				return LEVEL_RETRY_MESSAGE;
			case LEVEL_RESTART :
				return LEVEL_RESTART_MESSAGE;
			case LEVEL_TERMINATE :
				return LEVEL_TERMINATE_MESSAGE;
			default:
				return LEVEL_UNKNOWN_MESSAGE;
			}
		}
}

	// End of segment: Dynamiz\src\edu\dynamic\dynamiz\structure\DynamizException.java





	/**
	 * origin: Dynamiz\src\edu\dynamic\dynamiz\UI\DisplayerFormatter.java
	 */


package edu.dynamic.dynamiz.UI;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.logging.Logger;

import edu.dynamic.dynamiz.structure.ErrorFeedback;
import edu.dynamic.dynamiz.structure.EventItem;
import edu.dynamic.dynamiz.structure.Feedback;
import edu.dynamic.dynamiz.structure.HelpFeedback;
import edu.dynamic.dynamiz.structure.MyDate;
import edu.dynamic.dynamiz.structure.SuccessFeedback;
import edu.dynamic.dynamiz.structure.TaskItem;
import edu.dynamic.dynamiz.structure.ToDoItem;


/**
 * Acts as the information interpreter of Feedback items and formatter for UI
 * */
public class DisplayerFormatter implements DisplayerFormatterInterface {
	private final static Logger LoggerDisplayer = Logger.getLogger(DisplayerFormatter.class.getName());
	static private final String NULL_STRING = "null object";

	private final int ShowComdListLength = 1;
	private final int UpdateComdListLength = 2;

	/**
	 * @see edu.dynamic.dynamiz.UI.DisplayerFormatterInterface#displayWelcomeMessage()
	 */
	public String displayWelcomeMessage() {
		return WELCOME_MESSAGE;
	}

	/**
	 * Receive a @param Feedback Object
	 * @return ArrayList<StrIntPair>
	 * @see edu.dynamic.dynamiz.UI.DisplayerFormatterInterface#displayFeedback(edu.dynamic.dynamiz.structure.Feedback)
	 */
	public ArrayList<StrIntPair> displayFeedback(Feedback commandFeedback) {
		LoggerDisplayer.info("displayFeedback called");
		assert commandFeedback != null;
		ArrayList<StrIntPair> displayContentList = new ArrayList<StrIntPair>();
		String s = new String();
		int t = getFeedbackTag(commandFeedback);
		/**
		 * Check which subclass this Feedback Object belongs to and format
		 * accordingly
		 */
		switch (t) {
		case HELP_FEEDBACK_TAG:
			HelpFeedback hf = (HelpFeedback) commandFeedback;
			getHelpFeedbackContent(displayContentList, hf);
			break;
		case ERROR_FEEDBACK_TAG:
			ErrorFeedback ef = (ErrorFeedback) commandFeedback;
			getErrorFeedbackContent(displayContentList, ef);
			break;
		case SUCCESS_FEEDBACK_TAG:
			SuccessFeedback sf = (SuccessFeedback) commandFeedback;
			getSucFeedbackContent(displayContentList, sf);
			break;
		default:
			s = "Invalid Instruction\n";
			displayContentList.add(new StrIntPair(s));
		}
		LoggerDisplayer.info("displayFeedback return ");
		return displayContentList;
	}

	public void getHelpFeedbackContent(ArrayList<StrIntPair> displayContentList, HelpFeedback hf) {
		String s = new String();
		s = hf.getHelpContent();
		s += "\n";
		displayContentList.add(new StrIntPair(s));
	}

	public void getErrorFeedbackContent(ArrayList<StrIntPair> displayContentList, ErrorFeedback ef) {
		String s = new String();
		s = ef.getMessage();
		s += "\n";
		displayContentList.add(new StrIntPair(s));
	}

	public void getSucFeedbackContent(ArrayList<StrIntPair> displayContentList,SuccessFeedback sf) {
		assert (displayContentList != null);
		LoggerDisplayer.info("getSucFeedbackContent called");
		String s = new String();
		s = sf.getCommandType() + " successfully!";
		s = s + "\n";

		displayContentList.add(new StrIntPair(s));
		ToDoItem[] list = sf.getAffectedItems();

		if (list == null) {
			displayContentList.add(new StrIntPair("The list is empty!\n"));
			return;
		}
		/**
		 * Check which command this SuccessFeedback is, and format accordingly
		 */
		switch (sf.getCommandType().toLowerCase()) {
		case SHOW_COMMAND:
			assert (ShowComdListLength == list.length);
			formatShowAddComd(displayContentList, list);
			break;
		case ADD_COMMAND:
			assert (ShowComdListLength == list.length);
			formatShowAddComd(displayContentList, list);
			break;
		case UPDATE_COMMAND:
			assert (UpdateComdListLength == list.length);
			formatUpdateComd(displayContentList, list);
			break;
		default:
			formatListComd(displayContentList, list);
			break;
		}
	}

	private void formatShowAddComd(ArrayList<StrIntPair> displayContentList,ToDoItem[] list) {
		displayContentList.add(new StrIntPair(displayDividingLine()));
		formatTaskChunk(displayContentList, list[0]);
	}

	private void formatUpdateComd(ArrayList<StrIntPair> displayContentList,ToDoItem[] list) {
		displayContentList.add(new StrIntPair(displayParaLine()));
		displayContentList.add(new StrIntPair("Item affected:\n"));

		formatTaskChunk(displayContentList, list[0]);

		displayContentList.add(new StrIntPair(displayParaLine()));
		displayContentList.add(new StrIntPair("Updated Item:\n"));
		formatTaskChunk(displayContentList, list[1]);
	}

	private void formatListComd(ArrayList<StrIntPair> displayContentList,ToDoItem[] list) {
		displayContentList.add(new StrIntPair(displayDividingLine()));
		displayContentList.add(new StrIntPair(displayTitleLine()));
		displayContentList.add(new StrIntPair(displayDividingLine()));
		for (int i = 0; i < list.length; i++) {
			formatTaskLine(displayContentList, list[i]);
		}
		displayContentList.add(new StrIntPair(displayDividingLine()));
	}

	/**
	 * Format task list for list display 
	 * @param contentList
	 * @param item
	 */
	private void formatTaskLine(ArrayList<StrIntPair> contentList, ToDoItem item) {
		final String strForID = "| %-2s | %-26s|";
		final String strForPri = " %-9s";
		final String strForTime = "| %-17s| %-17s|";
		final String strForStat = " %-9s  ";
		final String strForEndLine = "|\n";
		assert item != null;
		assert contentList != null;
		int ID = item.getId();
		String des = item.getDescription();
		int priIntTag = item.getPriority();
		String prioS = TagFormat.formatPri(priIntTag);
		String starT = "";
		String endT = "";
		String stas = item.getStatus();
		int stasIntTag;
		if (stas.equalsIgnoreCase(STATU_PEND))
			stasIntTag = STATU_PEND_TAG;
		else{
			stasIntTag = STATU_COMPLETE_TAG;
		}
		if (des.length() >= 23) {
			des = des.substring(0, 23);
			des = des + "...";
		}
		if (item instanceof TaskItem) {
			TaskItem t = (TaskItem) item;
			starT = "";
			endT = t.getDeadlineString();
		} else if (item instanceof EventItem) {
			EventItem t = (EventItem) item;
			starT = t.getStartDateString();
			endT = t.getEndDateString();

		}
		contentList.add(new StrIntPair(String.format(strForID, ID, des)));
		contentList.add(new StrIntPair(String.format(strForPri, prioS),priIntTag));
		contentList.add(new StrIntPair(String.format(strForTime, starT, endT)));
		contentList.add(new StrIntPair(String.format(strForStat, stas),stasIntTag));
		contentList.add(new StrIntPair(strForEndLine));
	}

	/**
	 * Format task list for chunk display
	 * @param contentList
	 * @param item
	 */
	private void formatTaskChunk(ArrayList<StrIntPair> contentList,
			ToDoItem item) {
		assert item != null;
		assert contentList != null;

		int ID = item.getId();
		int pri = item.getPriority();
		int stasIntTag;
		String des = item.getDescription();
		String priStr = TagFormat.formatPri(pri);
		String stas = item.getStatus();

		if (stas.equalsIgnoreCase(STATU_PEND)){
			stasIntTag = STATU_PEND_TAG;
		}
		else{
			stasIntTag = STATU_COMPLETE_TAG;
		}

		contentList.add(new StrIntPair("ID: " + ID + "\n" + "Des: " + des+ "\n" + "Priority: "));
		contentList.add(new StrIntPair(priStr + "\n", pri));

		if (item instanceof TaskItem) {
			TaskItem t = (TaskItem) item;
			String ddl = t.getDeadlineString();
			contentList.add(new StrIntPair("Deadline: " + ddl + "\n"));
		} else if (item instanceof EventItem) {
			EventItem evtItem = (EventItem) item;
			String starT = evtItem.getStartDateString();
			String endT = evtItem.getEndDateString();
			contentList.add(new StrIntPair("Start Time: " + starT + "\n"));
			contentList.add(new StrIntPair("End Time:   " + endT + "\n"));
		}

		contentList.add(new StrIntPair("Status: "));
		contentList.add(new StrIntPair(stas + "\n", stasIntTag));
	}

	private int getFeedbackTag(Feedback f) {
		String fname = f.getClassName();
		if (fname.equalsIgnoreCase("SuccessFeedback")){
			return SUCCESS_FEEDBACK_TAG;
		}
		if (fname.equalsIgnoreCase("ErrorFeedback")){
			return ERROR_FEEDBACK_TAG;
		}
		if (fname.equalsIgnoreCase("HelpFeedback")){
			return HELP_FEEDBACK_TAG;
		}		
		return FEEDBACK_TAG;
	}

	/**
	 * @return Title Line for task list
	 */
	public String displayTitleLine() {
		String s = String.format(
				"| %-3s| %-26s| %-9s| %-17s| %-17s| %-9s  |\n", "ID",
				"Description", "Priority", "Start Time", "End Time", "Status");
		return s;
	}

	private String displayDividingLine() {
		String s = new String(
				"------------------------------------------------------------------------------------------------\n");
		return s;
	}

	private String displayParaLine() {
		String s = new String("----------------------------------------\n");
		return s;
	}

	/**
	 * @param
	 * @return String Format Calendar object to readable string
	 */
	public String dateFormatter(Calendar c) {
		String s = String.format("%1$tm,%1$te", c);
		return s;
	}

	/**
	 * @param
	 * @return Format MyDate object to readable string
	 */
	public String dateFormatter(MyDate d) {
		String s = String.format("%tm,%td,%ty", d);
		return s;
	}

	/**
	 * @param d
	 * @return Format MyDate object to readable string
	 */
	public String timeFormatter(MyDate d) {
		String s = String.format("%tH:%tM", d);
		return s;
	}

	/**
	 * @see edu.dynamic.dynamiz.UI.DisplayerInterface#displayStringList(ArrayList<String>)
	 */
	@Override
	public String displayStringList(ArrayList<String> arr) {
		if (arr == null)
			return NULL_STRING;
		StringBuilder s = new StringBuilder();

		for (int i = 0; i < arr.size(); i++) {
			if (!arr.get(i).isEmpty())
				s.append(arr.get(i).trim()).append("\n");
		}

		return s.toString();
	}

	/**
	 * @see edu.dynamic.dynamiz.UI.DisplayerFormatterInterface#displayTaskItem(TaskItem)
	 */
	@Override
	public String displayTaskItem(TaskItem task) {
		assert task != null;
		return task.toString();
	}

	/**
	 * @see edu.dynamic.dynamiz.UI.DisplayerFormatterInterface#displayTaskFile(TaskItem)
	 */
	@Override
	public String displayTaskFile(TaskItem task) {
		assert task != null;
		return task.toFileString();
	}

	/**
	 * @see edu.dynamic.dynamiz.UI.DisplayerFormatterInterface#displayTaskFeedback(TaskItem)
	 */
	@Override
	public String displayTaskFeedback(TaskItem task) {
		assert task != null;
		return task.getFeedbackString();
	}

	/**
	 * @see edu.dynamic.dynamiz.UI.DisplayerInterface#displayTaskList(ArrayList<TaskItem>)
	 */
	@Override
	public String displayTaskList(ArrayList<TaskItem> taskList) {
		assert taskList != null;

		StringBuilder s = new StringBuilder();
		for (int i = 0; i < taskList.size(); i++) {
			s.append(taskList.get(i).toString()).append("\n");
		}
		return s.toString();
	}

	/**
	 * @see edu.dynamic.dynamiz.UI.DisplayerFormatterInterface#displayTaskList(TaskItem[])
	 */
	@Override
	public String displayTaskList(TaskItem[] taskList) {
		assert taskList != null;
		StringBuilder s = new StringBuilder();
		for (int i = 0; i < taskList.length; i++) {
			s.append(taskList[i].toString()).append("\n");
		}
		return s.toString();
	}

	/**
	 * @see edu.dynamic.dynamiz.UI.DisplayerFormatterInterface#displayEventFeedback(EventItem)
	 */
	@Override
	public String displayEventFeedback(EventItem event) {
		assert event != null;
		return event.getFeedbackString();
	}

	/**
	 * @see edu.dynamic.dynamiz.UI.DisplayerFormatterInterface#displayEventFile(EventItem)
	 */
	@Override
	public String displayEventFile(EventItem event) {
		assert event != null;
		return event.toFileString();
	}

	/**
	 * @see edu.dynamic.dynamiz.UI.DisplayerFormatterInterface#displayEventItem(EventItem)
	 */
	@Override
	public String displayEventItem(EventItem event) {
		assert event != null;
		return event.toString();
	}

	/**
	 * @see edu.dynamic.dynamiz.UI.DisplayerInterface#displayEventList(ArrayList<EventItem>)
	 */
	@Override
	public String displayEventList(ArrayList<EventItem> eventList) {
		assert eventList != null;
		StringBuilder strB = new StringBuilder();
		for (int i = 0; i < eventList.size(); i++) {
			strB.append(eventList.get(i).toString()).append("\n");
		}
		return strB.toString();
	}

	/**
	 * @see edu.dynamic.dynamiz.UI.DisplayerFormatterInterface#displayEventList(EventItem[])
	 */
	@Override
	public String displayEventList(EventItem[] eventList) {
		assert eventList != null;
		StringBuilder s = new StringBuilder();
		for (int i = 0; i < eventList.length; i++) {
			s.append(eventList[i].toString()).append("\n");
		}
		return s.toString();
	}

	/**
	 * @see edu.dynamic.dynamiz.UI.DisplayerFormatterInterface#displayToDoItem(ToDoItem)
	 */
	@Override
	public String displayToDoItem(ToDoItem todoItem) {
		assert todoItem != null;
		return todoItem.toString();
	}

	/**
	 * @see edu.dynamic.dynamiz.UI.DisplayerFormatterInterface#displayToDoFeedback(ToDoItem)
	 */
	@Override
	public String displayToDoFeedback(ToDoItem todoItem) {
		assert todoItem != null;
		return todoItem.getFeedbackString();
	}

	/**
	 * @see edu.dynamic.dynamiz.UI.DisplayerFormatterInterface#displayToDoFile(ToDoItem)
	 */
	@Override
	public String displayToDoFile(ToDoItem todoItem) {
		assert todoItem != null;
		return todoItem.toFileString();
	}

	/**
	 * @see edu.dynamic.dynamiz.UI.DisplayerFormatterInterface#displayToDoList(ArrayList)
	 */
	@Override
	public String displayToDoList(ArrayList<ToDoItem> todoList) {
		assert todoList != null;
		StringBuilder s = new StringBuilder();
		for (int i = 0; i < todoList.size(); i++) {
			s.append(todoList.get(i).toString()).append("\n");
		}
		return s.toString();
	}

	/**
	 * @see edu.dynamic.dynamiz.UI.DisplayerFormatterInterface#displayToDoList(ToDoItem[])
	 */
	@Override
	public String displayToDoList(ToDoItem[] todoList) {
		assert todoList != null;
		StringBuilder s = new StringBuilder();
		for (int i = 0; i < todoList.length; i++) {
			s.append(todoList[i].toString()).append("\n");
		}
		return s.toString();
	}

	/**
	 * @see edu.dynamic.dynamiz.UI.DisplayerFormatterInterface#displayPrompt()
	 */
	public String displayPrompt() {
		String s = new String("Command: ");
		return s;
	}

	/**
	 * @see edu.dynamic.dynamiz.UI.DisplayerFormatterInterface#displayPrompt(int)
	 */
	public String displayPrompt(int promptTag) {
		String tag = new String();
		switch (promptTag) {
		case ENTER_COMMAND_PROMPT:
			tag = ENTER_COMMAND_STR;
			break;
		case ENTER_ITEM_PROMPT:
			tag = ENTER_COMMAND_STR;
			break;
		case ENTER_TASK_INDEX_PROMPT:
			tag = ENTER_TASK_INDEX_STR;
			break;
		case ENTER_TIME_PROMPT:
			tag = ENTER_TIME_PERIOD_STR;
			break;
		case INVALID_COMMAND_PROMPT:
			tag = ENTER_VALID_COMMAND_STR;
			break;
		default:
			tag = ENTER_VALID_COMMAND_STR;
		}
		return tag;
	}

	public String displayPrompt(String promptMessage) {
		return promptMessage;
	}

	/**
	 * @see edu.dynamic.dynamiz.UI.DisplayerFormatterInterface#displayHelpPage()
	 */
	@Override
	public ArrayList<StrIntPair> displayHelpPage() {
		ArrayList<StrIntPair> printContentList = new ArrayList<StrIntPair>();
		StringBuilder sb = new StringBuilder();
		String title = StringUtils.center("Help Page", 9);
		sb.append(title).append("\n");
		printContentList.add(new StrIntPair(sb.toString()));
		return printContentList;
	}
}

	// End of segment: Dynamiz\src\edu\dynamic\dynamiz\UI\DisplayerFormatter.java





	/**
	 * origin: Dynamiz\src\edu\dynamic\dynamiz\UI\DisplayerFormatterInterface.java
	 */

package edu.dynamic.dynamiz.UI;

import java.util.ArrayList;

import edu.dynamic.dynamiz.structure.EventItem;
import edu.dynamic.dynamiz.structure.Feedback;
import edu.dynamic.dynamiz.structure.TaskItem;
import edu.dynamic.dynamiz.structure.ToDoItem;

/**
 * Interface class for Displayer
 */
public interface DisplayerFormatterInterface {

	static final String WELCOME_MESSAGE = "Welcome to Dynamiz!\nType 'help' in the space below for more information!";

	/**
	 * Integer Tag for different Feedback type
	 */
	static final int FEEDBACK_TAG = 1;
	static final int ERROR_FEEDBACK_TAG = 2;
	static final int SUCCESS_FEEDBACK_TAG = 3;
	static final int HELP_FEEDBACK_TAG = 4;

	/**
	 * Integer Tag for different types of prompt
	 */
	static final int ENTER_COMMAND_PROMPT = 1;
	static final int ENTER_ITEM_PROMPT = 2;
	static final int ENTER_TASK_INDEX_PROMPT = 3;
	static final int ENTER_TIME_PROMPT = 4;
	static final int INVALID_COMMAND_PROMPT = 5;

	/**
	 * String content for different prompt
	 */
	static final String ENTER_COMMAND_STR = "Please enter command in the space below:";
	static final String ENTER_VALID_COMMAND_STR = "Please enter valid command:";
	static final String ENTER_TIME_PERIOD_STR = "Please enter time period: ";
	static final String ENTER_TASK_INDEX_STR = "Please enter index: ";

	/**
	 * Integer Tag for two different types of States
	 */
	static final int STATU_PEND_TAG = 11;
	static final int STATU_COMPLETE_TAG = 10;
	/**
	 * String content for States
	 */
	static final String STATU_PEND = "pending";
	static final String STATU_COMPLETE = "completed";

	/**
	 * String content for different command
	 */
	static final String UPDATE_COMMAND = "update";
	static final String SHOW_COMMAND = "show";
	static final String ADD_COMMAND = "add";

	/**
	 * Format for feedback item
	 */
	static final String FORMAT_FEEDBACKSTRING = "ID: %1$s\n" + "Desc: %2$s\n"
			+ "Priority: %3$d\n" + "Start: %4$s\n" + "End: %5$s\n"
			+ "Status: %7$s ";

	/**
	 * Receive @param commandFeedBack Fetch feedback information and format it
	 * in a readable form compact information and corresponding colour tag into
	 * An ArrayList of StrIntPair
	 * 
	 * @return ArrayList<StrIntPair>
	 */
	public ArrayList<StrIntPair> displayFeedback(Feedback commandFeedBack);

	/**
	 * @return Welcome Message
	 */
	public String displayWelcomeMessage();

	/**
	 * @param ArrayList
	 *            <String> format it into a single string
	 * @return String
	 */
	public String displayStringList(ArrayList<String> arr);

	/**
	 * @param ArrayList
	 *            <taskList> or TaskItem[]
	 * @return String of formatted taskList
	 */
	public String displayTaskList(ArrayList<TaskItem> taskList);

	/**
	 * @param taskList
	 * @return Formatted String of the content of taskList
	 */
	public String displayTaskList(TaskItem[] taskList);

	/**
	 * @param task
	 * @return Formatted String of the content of task
	 */
	public String displayTaskItem(TaskItem task);

	/**
	 * @param task
	 * @return Feedback String of the task
	 */
	public String displayTaskFeedback(TaskItem task);

	/**
	 * @param task
	 * @return TaskFilestring of this task
	 */
	public String displayTaskFile(TaskItem task);

	/**
	 * @param ArrayList
	 *            <EventItem> 
	 * @return String of formatted eventList
	 */
	public String displayEventList(ArrayList<EventItem> eventList);

	/**
	 * @param eventList
	 * @return A formatted string of the content of this eventList
	 */
	public String displayEventList(EventItem[] eventList);

	/**
	 * @param event
	 * @return A formatted String of the content of this event item
	 */
	public String displayEventItem(EventItem event);

	/**
	 * @param event
	 * @return A formatted String of the Feedback string of this event item
	 */
	public String displayEventFeedback(EventItem event);

	/**
	 * @param event
	 * @return A formatted String of the FileString of this event item
	 */
	public String displayEventFile(EventItem event);

	/**
	 * @param ArrayList<ToDoItem> or ToDoItem[]
	 * @return String of formatted todoList
	 */
	public String displayToDoList(ArrayList<ToDoItem> todoList);

	/**
	 * @param todoList
	 * @return A formatted String of the content of this todoList
	 */
	public String displayToDoList(ToDoItem[] todoList);

	/**
	 * @param todoItem
	 * @return A formatted String of the content of this todoItem
	 */
	public String displayToDoItem(ToDoItem todoItem);

	/**
	 * @param todoItem
	 * @return Formatted Feedback String of todoItem
	 */
	public String displayToDoFeedback(ToDoItem todoItem);

	/**
	 * @param todoItem
	 * @return A formatted String of the FileString of this todoItem
	 */
	public String displayToDoFile(ToDoItem todoItem);

	/**
	 * @return  "Enter command:" 
	 * @param String promptMessage
	 */
	public String displayPrompt();
	
	/**
	 * 
	 * @param promptTag@return  "Enter command:" 
	 * @return  "Enter command:" 
	 * @see {@link #FEEDBACK_TAG} for corresponding integer tag
	 */
	public String displayPrompt(int promptTag);
	
	/**
	 * @param  promptMessage
	 * @return specified prompt message
	 */
	public String displayPrompt(String promptMessage);

	/**
	 * @return Help page in a formatted String
	 */
	public ArrayList<StrIntPair> displayHelpPage();

}

	// End of segment: Dynamiz\src\edu\dynamic\dynamiz\UI\DisplayerFormatterInterface.java





	/**
	 * origin: Dynamiz\src\edu\dynamic\dynamiz\UI\StringUtils.java
	 */


/**
 * String Utilities for centralize string content
 */
class StringUtils {
	/**
	 * @param string
	 * @param int size
	 * @return String
	 * Format the content to the center 
	 */
	public static String center(String s, int size) {
		return center(s, size, " ");
	}
	public static String center(String s, int size, String pad) {
		if (pad == null)
			throw new NullPointerException("pad cannot be null");
		if (pad.length() <= 0)
			throw new IllegalArgumentException("pad cannot be empty");
		if (s == null || size <= s.length())
			return s;

		StringBuilder sb = new StringBuilder();
		for (int i = 0; i < (size - s.length()) / 2; i++) {
			sb.append(pad);
		}
		sb.append(s);
		while (sb.length() < size) {
			sb.append(pad);
		}
		return sb.toString();
	}
}

	// End of segment: Dynamiz\src\edu\dynamic\dynamiz\UI\StringUtils.java





	/**
	 * origin: Dynamiz\src\edu\dynamic\dynamiz\UI\StrIntPair.java
	 */

/**
 * Data structure designed for passing parameters between DisplayFormatter and UI
 * In our UI part, UI takes in StrIntPair where Str is the content to display 
 * and Int indicates the color tag of this String
 */
public class StrIntPair {
	static final int defaultTag = 0;
	private final String s;
	private final int intg;
	
	/**
	 * @param s
	 * @param i
	 * Construct a new StrIntPair Object with both String content and int tag 
	 */
	public StrIntPair(String s, int i){
		this.s = s;
		this.intg = i;
	}
	
	/**
	 * @param s
	 * Construct a new StrIntPair with String and default tag
	 */
	public StrIntPair(String s){
		this.s = s;
		this.intg = defaultTag;
	}
	public String getString(){
		return s;
	}
	public int getInt(){
		return intg;
	}
}

	// End of segment: Dynamiz\src\edu\dynamic\dynamiz\UI\StrIntPair.java





	/**
	 * origin: Dynamiz\src\edu\dynamic\dynamiz\UI\unitTest\DisplayerFormatterTest.java
	 */

package edu.dynamic.dynamiz.UI.unitTest;

import org.junit.Test;
import static org.junit.Assert.assertEquals;

import edu.dynamic.dynamiz.UI.DisplayerFormatter;
import edu.dynamic.dynamiz.UI.StrIntPair;

import edu.dynamic.dynamiz.structure.ErrorFeedback;
import edu.dynamic.dynamiz.structure.EventItem;
import edu.dynamic.dynamiz.structure.MyDate;
import edu.dynamic.dynamiz.structure.MyDateTime;
import edu.dynamic.dynamiz.structure.SuccessFeedback;
import edu.dynamic.dynamiz.structure.TaskItem;
import edu.dynamic.dynamiz.structure.ToDoItem;

import java.util.ArrayList;

/**
 * The JUnit Test for DispayerFormatter
 */
public class DisplayerFormatterTest {
	DisplayerFormatter dp = new DisplayerFormatter();

	@Test
	public void testDisplayTask() {
		TaskItem task1 = new TaskItem("CS2106 homework", 4, new MyDateTime(26,
				9, 2014, 23, 59));
		assertEquals(task1.toString(), dp.displayTaskItem(task1));
		assertEquals(task1.getFeedbackString(), dp.displayTaskFeedback(task1));
		assertEquals(task1.toFileString(), dp.displayTaskFile(task1));
	}

	@Test
	public void testDisplayTaskList() {
		TaskItem task1 = new TaskItem("CS2106 homework", 4, new MyDateTime(26,
				9, 2014, 23, 59));
		TaskItem task2 = new TaskItem("CS2105 homework", 4, new MyDateTime(26,
				9, 2014, 23, 59));
		TaskItem task3 = new TaskItem("CS2102 homework", 4, new MyDateTime(26,
				9, 2014, 23, 59));

		ArrayList<TaskItem> testList = new ArrayList<TaskItem>();
		testList.add(task1);
		testList.add(task2);
		testList.add(task3);

		String s = new String();
		s += task1.toString();
		s += "\n";
		s += task2.toString();
		s += "\n";
		s += task3.toString();
		s += "\n";

		assertEquals(s, dp.displayTaskList(testList));

		TaskItem[] testArray = new TaskItem[3];
		testArray[0] = task1;
		testArray[1] = task2;
		testArray[2] = task3;

		assertEquals(s, dp.displayTaskList(testArray));
	}

	@Test
	public void testDisplayToDo() {
		ToDoItem item = new ToDoItem("Do CS2103T", 1);

		String itemToString = new String();
		itemToString = item.toString();
		String itemToFile = new String();
		itemToFile = item.toFileString();

		System.out.println(item.toString());
		assertEquals(itemToString, dp.displayToDoItem(item));
		assertEquals(itemToFile, dp.displayToDoFile(item));
		assertEquals(item.getFeedbackString(), dp.displayToDoFeedback(item));

	}

	@Test
	public void testTodoList() {
		ToDoItem item1 = new ToDoItem("Do CS2103T", 1);
		ToDoItem item2 = new ToDoItem("Do CS2103T", 2);
		ToDoItem item3 = new ToDoItem("Do CS2102", 1);

		ArrayList<ToDoItem> todoList = new ArrayList<ToDoItem>();
		todoList.add(item1);
		todoList.add(item2);
		todoList.add(item3);

		String s = new String();
		s += item1.toString();
		s += "\n";
		s += item2.toString();
		s += "\n";
		s += item3.toString();
		s += "\n";
		assertEquals(s, dp.displayToDoList(todoList));
		ToDoItem[] testArray = new ToDoItem[3];
		testArray[0] = item1;
		testArray[1] = item2;
		testArray[2] = item3;
		assertEquals(s, dp.displayToDoList(testArray));

	}

	@Test
	public void testDisplayEvent() {
		EventItem item = new EventItem("Nana's concert", 5, new MyDate(27, 9, 
				2014));
		System.out.println(item.toString());
		assertEquals(item.toString(), dp.displayEventItem(item));
		assertEquals(item.toFileString(), dp.displayEventFile(item));
		assertEquals(item.getFeedbackString(), dp.displayEventFeedback(item));
	}

	@Test
	public void testEventList() {
		EventItem e1 = new EventItem("Nana's concert", 5, new MyDate(27, 9,
				2014));
		EventItem e2 = new EventItem("CS2105 midterms", new MyDateTime(4, 10,
				2014, 17, 0));
		EventItem e3 = new EventItem("Birthday", new MyDate(31, 10, 2014));

		ArrayList<EventItem> ls = new ArrayList<EventItem>();
		ls.add(e1);
		ls.add(e2);
		ls.add(e3);

		String s = new String();
		s += e1.toString();
		s += "\n";
		s += e2.toString();
		s += "\n";
		s += e3.toString();
		s += "\n";

		assertEquals(s, dp.displayEventList(ls));

		EventItem[] testArray = new EventItem[3];
		testArray[0] = e1;
		testArray[1] = e2;
		testArray[2] = e3;

		assertEquals(s, dp.displayEventList(testArray));

	}

	@Test
	public void testGetSucFeedbackContent() {
		ArrayList<StrIntPair> contentList = new ArrayList<StrIntPair>();
		ToDoItem[] itemList = new ToDoItem[1];
		itemList[0] = new ToDoItem("task1");

		SuccessFeedback sf = new SuccessFeedback("add", "task1", itemList);
		dp.getSucFeedbackContent(contentList, sf);
		assertEquals("add successfully!\n", contentList.get(0).getString());
		assertEquals(0, contentList.get(0).getInt());
		assertEquals(
				"------------------------------------------------------------------------------------------------\n",
				contentList.get(1).getString());
		assertEquals(0, contentList.get(1).getInt());
		assertEquals("ID: 11\nDes: task1\nPriority: ", contentList.get(2)
				.getString());
		assertEquals(0, contentList.get(2).getInt());
		assertEquals("None\n", contentList.get(3).getString());
		assertEquals(0, contentList.get(1).getInt());
		assertEquals("Status: ", contentList.get(4).getString());
		assertEquals(0, contentList.get(4).getInt());
	}

	@Test
	public void testGetErrorContent() {
		ArrayList<StrIntPair> contentList = new ArrayList<StrIntPair>();

		ErrorFeedback ef = new ErrorFeedback("add3", "add2",
				"invalid instruction");
		dp.getErrorFeedbackContent(contentList, ef);
		assertEquals("invalid instruction\n", contentList.get(0).getString());
		assertEquals(0, contentList.get(0).getInt());

	}

}

	// End of segment: Dynamiz\src\edu\dynamic\dynamiz\UI\unitTest\DisplayerFormatterTest.java





